name: Release and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.12)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      version_updated: ${{ steps.version-check.outputs.version_updated }}
      old_version: ${{ steps.version-check.outputs.old_version }}
      new_version: ${{ steps.version-check.outputs.new_version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format x.y.z (e.g., 1.0.12)"
            exit 1
          fi

      - name: Check version consistency
        id: version-check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          echo "Package.json version: ${PACKAGE_VERSION}"
          echo "Release version: ${RELEASE_VERSION}"
          
          if [ "${PACKAGE_VERSION}" != "${RELEASE_VERSION}" ]; then
            echo "Warning: Version mismatch between package.json (${PACKAGE_VERSION}) and release (${RELEASE_VERSION})"
            echo "Updating package.json version..."
            npm version ${RELEASE_VERSION} --no-git-tag-version
            echo "version_updated=true" >> $GITHUB_OUTPUT
            echo "old_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
            echo "new_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Run full test suite
        run: |
          npm run build
          npm run test:config || true
          npm run test:shell-multiline || true

      - name: Verify build integrity
        run: |
          npm run build
          test -f dist/aiflow-app.js
          test -f dist/aiflow-conan-app.js
          test -f dist/index.js
          echo "Build artifacts verified successfully"

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version in package.json
        run: npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version

      - name: Build project
        run: npm run build

      - name: Create distribution package
        run: npm pack

      - name: Test package installation
        run: |
          PACKAGE_FILE=$(ls git-aiflow-*.tgz)
          npm install -g ./${PACKAGE_FILE}
          
          # Test CLI availability
          if command -v aiflow &> /dev/null; then
            echo "‚úÖ aiflow command available"
            aiflow --help > /dev/null
          else
            echo "‚ùå aiflow command not found"
            exit 1
          fi
          
          if command -v aiflow-conan &> /dev/null; then
            echo "‚úÖ aiflow-conan command available"
            aiflow-conan --help > /dev/null
          else
            echo "‚ùå aiflow-conan command not found"
            exit 1
          fi
        shell: bash

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            git-aiflow-*.tgz
            dist/
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-ubuntu-latest-node22
          path: ./release-artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          cat << EOF > release-notes.md
          ## üöÄ AIFlow ${{ needs.validate-release.outputs.version }}
          
          ### üì¶ Installation
          
          \`\`\`bash
          npm install -g git-aiflow@${{ needs.validate-release.outputs.version }}
          \`\`\`
          
          ### ‚ú® What's Included
          
          - **aiflow**: AI-powered Git workflow automation
          - **aiflow-conan**: Specialized Conan package management tool
          
          ### üõ†Ô∏è System Requirements
          
          - Node.js >= 22.0.0
          - npm >= 7.0.0
          - Git with remote repository access
          
          ### üìã Quick Start
          
          \`\`\`bash
          # Initialize configuration
          aiflow init
          
          # Stage your changes and create MR
          git add .
          aiflow
          
          # For Conan package updates
          aiflow-conan <package-name>
          \`\`\`
          
          ### üîß Configuration
          
          See [Configuration Guide](README.md#ÈÖçÁΩÆËØ¥Êòé) for detailed setup instructions.
          
          ### üìù Changelog
          
          For detailed changes, see the [commit history](https://github.com/HeiSir2014/git-aiflow/commits/${{ needs.validate-release.outputs.tag }}).
          EOF

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN}}
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          release_name: "AIFlow ${{ needs.validate-release.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/git-aiflow-${{ needs.validate-release.outputs.version }}.tgz
          asset_name: git-aiflow-${{ needs.validate-release.outputs.version }}.tgz
          asset_content_type: application/gzip

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts]
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update version in package.json
        run: npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version

      - name: Build project
        run: npm run build

      - name: Verify package contents
        run: |
          echo "Package contents:"
          npm pack --dry-run
          
          echo -e "\nPackage size:"
          npm pack
          ls -lh git-aiflow-*.tgz

      - name: Publish to NPM (dry run)
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        run: |
          if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
            npm publish --tag beta
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          sleep 30  # Wait for NPM to propagate
          npm view git-aiflow@${{ needs.validate-release.outputs.version }}

  post-release-validation:
    name: Post-Release Validation
    runs-on: ${{ matrix.os }}
    needs: [validate-release, publish-npm]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Test NPM installation
        run: |
          # Wait for NPM propagation
          sleep 60
          
          # Install from NPM
          npm install -g git-aiflow@${{ needs.validate-release.outputs.version }}
          
          # Verify installation
          aiflow --version || aiflow --help
          aiflow-conan --version || aiflow-conan --help
          
          echo "‚úÖ Package successfully installed from NPM"

      - name: Test CLI functionality
        run: |
          # Test help commands
          aiflow --help
          aiflow --config-help
          aiflow-conan --help
          aiflow-conan --config-help
          
          echo "‚úÖ CLI commands working correctly"

  sync-version-pr:
    name: Create Version Sync PR
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.version_updated == 'true'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version in package.json
        run: npm version ${{ needs.validate-release.outputs.version }} --no-git-tag-version

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create changelog entry
          cat << EOF > changelog-entry.md
          ## [${VERSION}] - ${DATE}

          ### Added
          - Release version ${VERSION}

          ### Changed
          - Updated package version to ${VERSION}

          ### Fixed
          - Version synchronization between package.json and release tag
          EOF
          
          # Insert new changelog entry after the [Unreleased] section
          awk '
          /^## \[Unreleased\]/ {
            print
            print ""
            while ((getline line < "changelog-entry.md") > 0) {
              print line
            }
            close("changelog-entry.md")
            print ""
            next
          }
          { print }
          ' CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          
          # Clean up
          rm changelog-entry.md

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create version sync branch
        run: |
          BRANCH_NAME="sync-version-${{ needs.validate-release.outputs.version }}"
          git checkout -b ${BRANCH_NAME}
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: sync package.json version to ${{ needs.validate-release.outputs.version }}

          - Updated package.json version from ${{ needs.validate-release.outputs.old_version }} to ${{ needs.validate-release.outputs.new_version }}
          - Updated CHANGELOG.md with release information
          - This ensures consistency between release tag and package version
          - Auto-generated by release workflow"

      - name: Push version sync branch
        run: |
          BRANCH_NAME="sync-version-${{ needs.validate-release.outputs.version }}"
          git push origin ${BRANCH_NAME}

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Sync package.json version to ${{ needs.validate-release.outputs.version }}`,
              head: `sync-version-${{ needs.validate-release.outputs.version }}`,
              base: 'master',
              body: `## üì¶ Version Synchronization

              This PR automatically syncs the \`package.json\` version to match the release tag.

              **Changes:**
              - Updated version from \`${{ needs.validate-release.outputs.old_version }}\` to \`${{ needs.validate-release.outputs.new_version }}\`
              - Updated \`package-lock.json\` accordingly
              - Updated \`CHANGELOG.md\` with release information

              **Context:**
              - Release: [${{ needs.validate-release.outputs.tag }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }})
              - Workflow: [Release and Publish](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

              **Auto-generated by:** Release workflow
              **Status:** Ready for review and merge`,
              labels: ['automated', 'version-sync', 'release']
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

  notify-release:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate-release, publish-npm, post-release-validation, sync-version-pr]
    if: always()
    
    steps:
      - name: Determine release status
        id: status
        run: |
          if [ "${{ needs.validate-release.result }}" == "success" ] && \
             [ "${{ needs.publish-npm.result }}" == "success" ] && \
             [ "${{ needs.post-release-validation.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ Release ${{ needs.validate-release.outputs.version }} completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Release ${{ needs.validate-release.outputs.version }} failed. Check workflow logs." >> $GITHUB_OUTPUT
          fi

      - name: Create release summary
        run: |
          echo "# üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Release Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Artifacts: ${{ needs.build-release-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Publish: ${{ needs.publish-npm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Post-Release Validation: ${{ needs.post-release-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
