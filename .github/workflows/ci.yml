name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Check for TypeScript errors
        run: |
          if npx tsc --noEmit 2>&1 | grep -q "error TS"; then
            echo "TypeScript compilation errors found"
            exit 1
          fi

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run config tests
        run: npm run test:config
        continue-on-error: true

      - name: Run shell multiline tests
        run: npm run test:shell-multiline
        continue-on-error: true

      - name: Run OpenAI parse tests
        run: npm run test:openai-parse
        continue-on-error: true

      - name: Verify built executables
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            test -x dist/aiflow-app.js
            test -x dist/aiflow-conan-app.js
          else
            test -f dist/aiflow-app.js
            test -f dist/aiflow-conan-app.js
          fi
        shell: bash

      - name: Test CLI help commands
        run: |
          node dist/aiflow-app.js --help
          node dist/aiflow-conan-app.js --help
        shell: bash

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Package npm
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.tgz
          retention-days: 7

      - name: Verify package contents
        run: |
          tar -tzf *.tgz | head -20
          echo "Package size:"
          ls -lh *.tgz

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          npm audit --audit-level=high --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "Security vulnerabilities found:"
            cat audit-results.json
          fi

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Analyze bundle size
        run: |
          echo "Checking build output size:"
          npm run build
          du -sh dist/
          ls -la dist/

      - name: License compatibility check
        run: |
          echo "Checking dependency licenses:"
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;BlueOak-1.0.0' || true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check code complexity
        run: |
          echo "Analyzing code complexity..."
          find src -name "*.ts" -not -path "*/test/*" | wc -l | xargs echo "TypeScript files:"
          find src -name "*.ts" -not -path "*/test/*" -exec wc -l {} + | tail -1 | awk '{print $1 " total lines of code"}'

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments:"
          grep -r "TODO\|FIXME\|XXX\|HACK" src/ || echo "No TODO/FIXME comments found"

      - name: Verify TypeScript strict mode
        run: |
          echo "Verifying TypeScript strict mode configuration:"
          grep -A 10 -B 2 '"strict"' tsconfig.json || echo "TypeScript strict mode check"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-package]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test CLI installation and execution
        run: |
          # Test global installation simulation
          npm pack
          npm install -g ./git-aiflow-*.tgz
          
          # Test CLI commands exist
          which aiflow
          which aiflow-conan
          
          # Test help commands
          aiflow --help || true
          aiflow-conan --help || true
          
          # Test config help
          aiflow --config-help || true
          aiflow-conan --config-help || true

      - name: Test configuration validation
        run: |
          # Test configuration examples
          cp config.example.yaml test-config.yaml
          echo "Testing configuration file validation..."
          node dist/aiflow-app.js --help > /dev/null || echo "CLI help test completed"

  windows-compatibility:
    name: Windows Compatibility
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test Windows PowerShell execution
        run: |
          npm pack
          npm install -g (Get-ChildItem git-aiflow-*.tgz).Name
          aiflow --help
          aiflow-conan --help
        shell: pwsh

      - name: Test Windows Command Prompt execution
        run: |
          aiflow --help
          aiflow-conan --help
        shell: cmd
